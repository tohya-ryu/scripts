#!/usr/bin/ruby
require 'optparse'

# ignore these block devices entirely
IGNO_DEV = [ "sda" ]

# ignore these individual partitions
IGNO_PART = [ ]

# only dismount these partitions with option -a
PROT_PART = [ "uuid" ]

# mapper names for encrypted partitions
CRYPT_MAP = { "uuid" => "mapper_name" }

# static mount points
STAT = { "uuid" => "mount_point_path" }



amtr = Amntr.new
amtr.run

###############################################################################
BEGIN {

  class Amntr
    attr_reader :block_devices, :options, :operation
    attr_accessor :second_pass

    def initialize
      @block_devices = Array.new
      @options = Hash.new
      @options[:mount] = false
      @options[:unmount] = false
      @options[:verbose] = false
      @options[:all] = false
      @options[:eject] = false
      @args = nil
      @gather_all = true
      @second_pass = false
      @operation = nil
    end

    def run
      parse_options
      if @options[:mount]
        @operation = "mount/open"
        gather_devices
        @block_devices.each do |blkdev|
          blkdev.partitions.each do |part|
            part.mount_or_open
          end
        end
        if @second_pass
          gather_devices
          @block_devices.each do |blkdev|
            blkdev.partitions.each do |part|
              part.mount_or_open
            end
          end
        end
      else # @options[:unmount]
        @operation = "unmount/close"
        gather_devices
        @block_devices.each do |blkdev|
          blkdev.partitions.reverse_each do |part|
            part.unmount_or_close
          end
          if @options[:eject]
            flag = true # it's ok to eject
            blkdev.partitions.each do |part|
              if part.mounted?
                flag = false
              end
              if part.is_protected? && !@options[:all]
                flag = false
              end
            end
            if flag
              blkdev.eject
            end
          end
        end
      end
    end


    private

    def gather_devices
      curr_dev = nil
      dev_skip = false
      positions = Array.new
      blkdevs = Array.new
      str = `lsblk -f`
      i = 0
      k = 0
      str.each_line do |l|
        if i == 0
          j = 0
          b = -1
          e = -1
          l.each_char do |c|
            if c == " "
              if l[j+1] != " "
                e = j
              else
                e = -1
              end
            else
              b = j if b == -1 # set beginning
              e = -1
              if l.length == j+1
                e = j
              end
            end
            if b != -1 && e != -1
              e -= 1
              if str.length == j+1
                positions.push b..-1
              else
                positions.push b..e
              end
              b = -1
            end
            j += 1
          end
        end
        i += 1
        next if i == 1 # no need to process line[0]
        h = Hash.new
        h[:name] = l[positions[0]].strip
        h[:type] = l[positions[1]].strip
        h[:label] = l[positions[2]].strip
        h[:uuid] = l[positions[3]].strip
        #h[:avail] = l[positions[4]].strip
        #h[:use] = l[positions[5]].strip
        h[:mnt] = l[positions[6]].strip

        if h[:name].match? /\Asd[a-z]\z/
          if (@gather_all || ARGV.include?(h[:name])) && 
            !IGNO_DEV.include?(h[:name])

            dev_skip = false
            dev_found = false
            @block_devices.each do |b|
              if b.name == h[:name]
                curr_dev = b
                dev_found = true
                break
              end
            end
            unless dev_found
              curr_dev = BlockDevice.new(self, h[:name])
              @block_devices.push(curr_dev)
            end
          else
            puts "Skipping Block Device #{h[:name]}" if @options[:verbose]
            dev_skip = true
          end
        else
          unless dev_skip
            if IGNO_PART.include?(h[:uuid])
              if @options[:verbose]
                puts "Skipping Partition #{h[:name][2..-1]}"
              end
            else
              part_found = false
              curr_dev.partitions.each do |p|
                if p.uuid == h[:uuid]
                  part_found = true
                  break
                end
              end
              unless part_found
                  curr_dev.add_partition(Partition.new(curr_dev, h))
              end
            end
          end
        end
      end
    end

    def parse_options
      optparse = OptionParser.new do |opts|
        opts.banner = "Usage: amntr [devices...] -m|-u [options]"
        opts.on_tail('-h', '--help', 'Display this screen') do
          puts opts
          exit
        end
        opts.on('-v', '--verbose', 'Verbose mode') do |arg|
          @options[:verbose] = true
        end
        opts.on('-m', '--mount', Array, 'Mount partitions') do |arg|
          @options[:mount] = true 
        end
        opts.on('-u', '--unmount', 'Unmount partitions') do |arg|
          @options[:unmount] = true 
        end
        opts.on('-e', '--eject', 'Shut down devices') do |arg|
          @options[:eject] = true
        end
        opts.on('-a', '--all',
                'Also unmount/eject protected partitions') do |arg|
          @options[:all] = true 
        end
      end
      begin
        optparse.parse!
      rescue OptionParser::InvalidOption => e
        puts e
        puts ""
        puts optparse
        exit
      end
      if @options[:mount] && @options[:unmount]
        puts "Invalid arguments: options -m and -u are mutually exclusive."
        puts ""
        puts optparse
        exit
      end
      if !@options[:mount] && !@options[:unmount]
        puts "Invalid arguments: requires either -m or -u option"
        puts ""
        puts optparse
        exit
      end
      @gather_all = (ARGV.count == 0)
    end

  end

  class BlockDevice
    attr_reader :name, :partitions, :state

    def initialize(state, name)
      @state = state
      @name = name
      @partitions = Array.new
    end

    def add_partition(partition)
      @partitions.push(partition)
    end

    def eject
      puts "Attempting to eject /dev/#{@name}" if @state.options[:verbose]
      cmd = "udisksctl power-off --block-device /dev/#{@name}"
      puts cmd if @state.options[:verbose]
      if system("#{cmd}")
        puts "Shut down block device /dev/#{@name}"
      else
        puts "ERROR"
        puts "Failed to shut down block device /dev/#{@name}"
      end
    end

  end

  class Partition
    attr_reader :name, :label, :type, :uuid, :size, :used

    def initialize(blkdev, data)
      @blkdev = blkdev
      @name = data[:name][2..-1]
      @label = data[:label]
      @type = data[:type]
      @uuid = data[:uuid]
      @prot = PROT_PART.include?(@uuid)
      @size = nil
      @used = nil
      @crypt = (@type == "crypto_LUKS")
      @mount_point = data[:mnt]
      @mapper_name = nil
      @mounted = false # or open if encrypted
      @mapper = false
      CRYPT_MAP.each do |k, v|
        if @name == v
          @mapper = true
        end
      end
      if @crypt
        if CRYPT_MAP.has_key?(@uuid)
          @mapper_name = CRYPT_MAP[@uuid]
        else
          puts "ERROR"
          puts "Missing entry in CRYPT_MAP for partition #{@name} " << 
            "(uuid: #{@uuid})"
          exit
        end
        cmd = "cryptsetup status #{@mapper_name}"
        puts cmd if @blkdev.state.options[:verbose]
        cmd_response = `#{cmd}`
        if cmd_response.include?("is inactive")
          if @blkdev.state.operation == "mount/open"
            cmd = "cryptsetup luksOpen /dev/#{@name} #{@mapper_name}"
            puts cmd if @blkdev.state.options[:verbose]
            if system("#{cmd}")
              @mounted = true
              @blkdev.state.second_pass = true
            end
          end
        elsif cmd_response.include?("is active")
          @mounted = true
        else
          puts "ERROR"
          puts "Failed to ascertain state of encrypted partition #{@name}"
          exit
        end
      else
        @mounted = !@mount_point.empty?
        set_mount_point
      end
    end

    def mount_or_open
      if @mounted
        if @blkdev.state.options[:verbose]
          puts "Partition #{@name} is already mounted." 
        end
        return
      else
        puts "Attempting to mount #{@name}" if @blkdev.state.options[:verbose]
      end
      cmd = ""
      if mapper?
        cmd = "mount /dev/mapper/#{@name} #{@mount_point}"
      else
        cmd = "mount /dev/#{@name} #{@mount_point}"
      end
      puts cmd if @blkdev.state.options[:verbose]
      if system("#{cmd}")
        @mounted = true
        cmd = "df -h --total"
        puts cmd if @blkdev.state.options[:verbose]
        str = `#{cmd}`
        name = ""
        if mapper?
          name = "/dev/mapper/#{@name}"
        else
          name = "/dev/#{@name}"
        end
        str.each_line do |line|
          ar = line.split(" ")
          if ar[0] == name
            puts "Mounted #{@name} (#{@label}) " <<
              "[#{ar[2]}/#{ar[1]}] to #{@mount_point}"
          end
        end
      else 
        puts "ERROR"
        puts "Failed to mount partition #{@name} to #{@mount_point}"
        exit
      end
    end

    def unmount_or_close
      if is_protected? && !@blkdev.state.options[:all]
        if @blkdev.state.options[:verbose]
          puts "Skipping #{@name} because of protected status (-a to include)"
        end
        return
      end
      if @mounted
        if encrypted?
          if @blkdev.state.options[:verbose]
            puts "Attempting to close #{@name} #{@mount_point}"
          end
          flag = false
          @blkdev.partitions.each do |p|
            if p.mapper? && p.name == @mapper_name && !p.mounted?
              flag = true
              break
            end
          end
          if flag
            cmd = "cryptsetup luksClose #{@mapper_name}"
            puts cmd if @blkdev.state.options[:verbose]
            if system("#{cmd}")
              @mounted = false
              puts "Closed encrypted partition #{@name}"
            else
              puts "ERROR"
              puts "Failed to close encrypted partition #{@name}"
            end
          end
        else
          if @blkdev.state.options[:verbose]
            puts "Attempting to unmount #{@name} #{@mount_point}"
          end
          cmd = "umount #{@mount_point}"
          puts cmd if @blkdev.state.options[:verbose]
          if system("#{cmd}")
            @mounted = false
            if Dir.rmdir(@mount_point)
              if @blkdev.state.options[:verbose]
                puts "Removed directory #{@mount_point}"
              end
            else
              puts "ERROR"
              puts "Failed to remove directory #{@mount_point}"
            end
            puts "Unmounted #{@name} #{@mount_point}"
          else
            puts "ERROR"
            puts "Failed to unmount #{@name} #{@mount_point}"
          end
        end
      end
    end

    def mounted?
      @mounted
    end

    def mapper?
      @mapper
    end

    def encrypted?
      @crypt
    end

    def is_protected?
      @prot
    end

    def set_mount_point
      if @mount_point.empty?
        puts "Set mount point for #{@name}" if @blkdev.state.options[:verbose]
        if STAT.has_key?(@uuid)
          @mount_point = STAT[@uuid]
        else
          i = 0
          while Dir.exist?("/mnt/amtr#{i}") do
            i += 1
          end
          @mount_point = "/mnt/amtr#{i}"
        end
        puts "> #{@mount_point}" if @blkdev.state.options[:verbose]
        unless Dir.exist?(@mount_point)
          if Dir.mkdir(@mount_point)
            if @blkdev.state.options[:verbose]
              puts "Created directory #{@mount_point}"
            end

            if @type == "ext4"
              cmd = "chown 1000:1000 #{@mount_point}"
              puts cmd if @blkdev.state.options[:verbose]
              unless system("#{cmd}")
                puts "ERROR"
                puts "Failed to set owner of #{@mount_point}"
              end
            end
          else
            puts "ERROR"
            puts "Unable to create directory #{@mount_point}"
            exit
          end
        end
      end
    end

  end

}
